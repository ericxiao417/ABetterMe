# 概述

版本控制系统，Version Control System, 可以理解为一个‘数据库’，在需要的时候，它可以帮你完整的保存一个项目的快照。当你需要查看之前的一个版本时，VCS可以显示出当前版本与上一个版本之间的细节的改动。

## 基本流程

**仓库：** 是VCS中最基本的模块，Repository。可以把一个仓库想象成一个数据库，存放了所有的版本和元数据。在Git中，仓库只是一个在你的项目的根目录下的名为".git"的隐藏文件夹。



**创建Git仓库：** 

```shell
cd path/to/project/folder
git init
```

**忽略文件：** 被放在项目根目录中一个被称之为".gitignore"的文件中。这里强烈建议在做第一次提交之前，首先定义好这个忽略文件列表。因为一旦这些文件被提交了，想要再次把他们清除很麻烦。

- 忽略一个特定的文件：给出从根目录开始的路径和文件名，path/to/file.ext。
- 忽略项目下所有这个名字的文件：只要给出文件的全名，不要包括任何路径，filename.ext。
- 忽略项目下所有这个类型的文件：*.ext 。
- 忽略一个特定目录下的所有文件：path/to/folder/*。

**克隆远程仓库：** git clone + remote repository url。

- 对于http and git协议，不需要任何权限。
- 对于https协议，可能会需要输入用户名和密码。
- 对于ssh协议，必须要通过一个SSH Public Key的认证。

**仓库中一个文件的状态：** 

- 未被追踪的文件(untracked): 这个文件还未被纳入VCS中，表示VCS不能追踪它的改动。
- 已被追踪的文件(tracked): 已经被纳入VCS中，Git会监视它的任何改动。

**暂存区(Staging Area):** 这是Git最强大的功能，它可以让你来确定哪些文件将被打包到下次提交中。

- Changes not staged for commit: 改动的文件没有打包到下次提交中。
- Changes to be commited: 改动的文件，已经打包到下次的提交中。
- Untracked files: 未被追踪的文件。

**提交注释commit message:** 花一点时间写一个好的commit message是非常重要的。写一个简短的标题，不要超过50个字符，然后使用一个空行来分隔注释的内容。注释的内容尽可能的包含两个问题：为什么要做这次修改和改动了哪些。Git会为你打开一个文本编辑器，具体哪个文本编辑器，可以在core.editor里面设置它。



==注：== 一次commit只对应一个相关的改动，不要在一个commit中提交无关的改动，每一种不同的改动都要打包在不同的commit中。



每次commit都包含以下的元数据：

- Commit Hash: 40位字符的校验码。
- Author Name & Email
- Date
- Commit Message

使用 git log -p 查看更具体的改动。

# 分支

## 暂时保存更改

一个已经commit的改动会被永久的保存到仓库中。当需要暂时性的保存一下本地改动时，可以用git stash。



**stash,** 储藏，可以把stash想象成一个剪切板，他会获取你工作副本中的所有改动，并且保存起来。这样，你就会得到一个干净的工作区域，也就是一个不存在任何改动的工作目录。



之后，随时都可以重新调回那些保存起来的改动到工作区域，从而继续未完成的工作。可以建立多个stash。



```shell
git stash
saved working directory and index state WIP on master:....
HEAD is now at ...

git status
# On branch master
nothing to commit(working directory clean)
```

当想把保存起来的改动调回到工作区域时，可以进行如下操作：

```shell
git stash list
stash@{0}: WIP on master: ....
```

**最新建立的stash会被显示在列表的最上面，被命名为 stash@{0}。** 在此之前建立的stash，就从1开始，1,2,3...



当想调回一个之前的stash的时候，有如下两种方法：

1. 使用git stash pop命令，它将调回最新的一个存储单元，并且把它从存储中删掉。
2. 使用 git stash apply <stashname> 命令，它将调回所给出的存储单元，而这个改动还会存在。可以随时用 git stash drop <stashname> 来删除它。

## HEAD

说简单一点，HEAD就是当前活跃分支的游标。在新建立仓库时，Git会预先把HEAD指向master分支。



形象一点说，就是，你现在在哪，HEAD就指向哪，所以Git才知道你在哪。



不过HEAD并非只能指向分支的最顶端，即时间节点距今最近的那个，实际上它可以指向任何一个节点，它就是Git内部用来追踪当前位置的东西。



HEAD: 表示 current branch, 即当前所在的分支。当用git checkout切换分支的时候，HEAD会重新指向新的分支。有的时候HEAD会指向一个没有名字的分支，这种情况叫做"detached HEAD"。



head：是commit对象的引用，每个head都有一个名字。

# 合并改动

## Git merge

在Git中，进行合并非常简单，只需要以下两个步骤：

1. 切换到那个需要接收改动的分支上。
2. 执行 git merge，并且在后面加上那个将要合并进来的分支的名称。

将 contact-form合并到master当中去：

```shell
git checkout master
git merge contact-form
```

# 撤销操作

恢复一个文件到上次提交的状态，用如下指令：

```shell
git checkout -- file/to/restore.ext
```

这个操作将撤销在特定文件上所有的未提交的改动。

放弃在工作副本中的所有本地改动，并且让本地副本恢复到上次提交的时候，使用如下命令：

```shell
git reset --hard HEAD
```

## 撤销已提交的改动

### git revert

使用git revert可以撤销某个之前的提交。但是这个命令并不是删除那个提交，相反，它是恢复那个提交的改动。这个操作实际上会产生一个新的提交，在提交中包括了你想要撤销的那个提交的所有反向改动。例如在提交中，你增加了一些字符，那么这个恢复提交就会把这些字符删掉。

### git reset

这个操作不会产生一个新的提交，也不会删除某个提交，只会重置当前的HEAD到一个特定的版本，也叫做回滚，roll back。

git reset --hard HEAD: 会删除掉这个特定版本之后的所有的改动，本地也不会有，要慎重。

git reset --keep HEAD: 会把这个特定版本后的所有改动转换成本地改动，并且保留在本地工作目录中。

# 比较改动 diff

![image-20230108113109327](https://raw.githubusercontent.com/ericxiao417/Pics/main/image-20230108113109327.png)
